#include <Wire.h>
#include <Adafruit_MLX90614.h>
#include <SPI.h>
#include <SPFD5408_Adafruit_GFX.h>
#include <SPFD5408_Adafruit_TFTLCD.h>

#define LCD_CS A3
#define LCD_CD A2
#define LCD_WR A1
#define LCD_RD A0
#define LCD_RESET A4
#define PIEZO_BUZZER 8  // Example pin for piezo buzzer, choose an appropriate pin
#define BLACK 0x0000
#define RED 0xF800
#define WHITE 0xFFFF

int x1 = 90;
int y1 = 0;
int x2 = 0;
int y2 = 0;
Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);

int pulsePin = A6;
int blinkPin = 13;
volatile int BPM;
volatile int Signal;
volatile int IBI = 600;
volatile boolean Pulse = false;
volatile boolean QS = false;
static boolean serialVisual = true;

Adafruit_MLX90614 mlx;

volatile int rate[10];
volatile unsigned long sampleCounter = 0;
volatile unsigned long lastBeatTime = 0;
volatile int P = 512;
volatile int T = 512;
volatile int thresh = 525;
volatile int amp = 100;
volatile boolean firstBeat = true;
volatile boolean secondBeat = false;

void setup() {
  pinMode(blinkPin, OUTPUT);
  pinMode(PIEZO_BUZZER, OUTPUT);  // Configure the buzzer pin as OUTPUT
  Serial.begin(115200);
  interruptSetup();

  tft.reset();
  tft.begin(0x9341);
  tft.setRotation(0);
  tft.fillScreen(BLACK);

  tft.setCursor(10, 10);
  tft.setTextSize(2);
  tft.setTextColor(WHITE);
  tft.setRotation(3);
  tft.print("Heart rate sensor");

  mlx.begin();
}

void loop() {
  tft.fillRect(0, 0, tft.width(), tft.height(), BLACK); // Clear the screen
  // Display temperature on the LCD
  float temperature = mlx.readObjectTempC();
  tft.setCursor(120, 80); // Adjusted position
  tft.setTextSize(3);
  tft.setTextColor(WHITE);
  tft.setRotation(3);
  tft.print("Temp=");
  tft.print(temperature);
  tft.print("C"); // normal 37 celsius

  // Check if body temperature is 37 or above and trigger the buzzer
  if (temperature >= 37.0) {
    digitalWrite(PIEZO_BUZZER, HIGH);
    delay(500);  // Buzzer ON time
    digitalWrite(PIEZO_BUZZER, LOW);
  }

  serialOutput();

  if (QS == true) {
    serialOutputWhenBeatHappens();
    QS = false;
  }

  delay(20);
}

void interruptSetup() {
  TCCR2A = 0x02;
  TCCR2B = 0x06;
  OCR2A = 0X7C;
  TIMSK2 = 0x02;
  sei();
}

void serialOutput() {
  if (serialVisual == true) {
    arduinoSerialMonitorVisual('-', Signal);
  } else {
    sendDataToSerial('S', Signal);
  }
}

void serialOutputWhenBeatHappens() {
  Serial.print(" Heart-Beat Found ");
  Serial.print("BPM: ");
  Serial.println(BPM);

  Serial.print("Temperature: ");
  Serial.println(mlx.readObjectTempC());

  int t = millis() / 1000;
  x2 = map(BPM, 0, 220, 90, 240);
  y2 = map(t, 0, 120, 0, 320);
  tft.drawLine(x1, y1, x2, y2, RED);
  x1 = x2;
  y1 = y2;

  tft.setCursor(150, 200);
  tft.setTextSize(3);
  tft.setTextColor(WHITE);
  tft.setRotation(3);
  tft.print("BPM=");
  tft.print(BPM);
}

void arduinoSerialMonitorVisual(char symbol, int data) {
  const int sensorMin = 0;
  const int sensorMax = 1024;
  int sensorReading = data;
  int range = map(sensorReading, sensorMin, sensorMax, 0, 11);
}

void sendDataToSerial(char symbol, int data) {
  Serial.print(symbol);
  Serial.println(data);
}

ISR(TIMER2_COMPA_vect) {
  cli();
  Signal = analogRead(pulsePin);
  sampleCounter += 2;
  int N = sampleCounter - lastBeatTime;

  if (Signal < thresh && N > (IBI / 5) * 3) {
    if (Signal < T) {
      T = Signal;
    }
  }

  if (Signal > thresh && Signal > P) {
    P = Signal;
  }

  if (N > 250) {
    if ((Signal > thresh) && (Pulse == false) && (N > (IBI / 5) * 3)) {
      Pulse = true;
      digitalWrite(blinkPin, HIGH);
      IBI = sampleCounter - lastBeatTime;
      lastBeatTime = sampleCounter;

      if (secondBeat) {
        secondBeat = false;
        for (int i = 0; i <= 9; i++) {
          rate[i] = IBI;
        }
      }

      if (firstBeat) {
        firstBeat = false;
        secondBeat = true;
        sei();
        return;
      }

      word runningTotal = 0;

      for (int i = 0; i <= 8; i++) {
        rate[i] = rate[i + 1];
        runningTotal += rate[i];
      }

      rate[9] = IBI;
      runningTotal += rate[9];
      runningTotal /= 10;
      BPM = map(60000 / runningTotal, 50, 150, 60, 100);
      if (BPM >= 170 && BPM <= 179) {
        BPM = 60;
      } else if (BPM > 200) {
        BPM += 100;
      }
      QS = true;
    }
  }

  if (Signal < thresh && Pulse == true) {
    digitalWrite(blinkPin, LOW);
    Pulse = false;
    amp = P - T;
    thresh = amp / 2 + T;
    P = thresh;
    T = thresh;
  }

  if (N > 2500) {
    thresh = 512;
    P = 512;
    T = 512;
    lastBeatTime = sampleCounter;
    firstBeat = true;
    secondBeat = false;
  }

  sei();
}
